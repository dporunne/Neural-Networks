from numpy import exp, array, random, dot


class NeuralNetwork():
    def __init__(self):
        random.seed(1)
        self.weights = 2 * random.random((3, 1)) - 1
        # random.random = returns the next random floating point number in the range(0,1)

    def __sigmoid(self, x):
        return 1 / (1 + exp(-x))

    def __sigmoid_derivative(self, x):
        return x * (1 - x)

    def train(self, train_inputs, train_outputs, no_iterations):
        for iteration in range(no_iterations):
            output = self.think(train_inputs)
            error = train_outputs - output
            adjustment = dot(train_inputs.T, error * self.__sigmoid_derivative(output))
            self.weights += adjustment

    def think(self, inputs):
        return self.__sigmoid(dot(inputs, self.weights))


if __name__ == "__main__":
    
    neural_network = NeuralNetwork()

    print("Random starting synaptic weights: ")
    print(neural_network.weights)
    train_inputs = array([[0,0,1],[1,1,1],[1,0,1],[0,1,1]])
    train_outputs = array([[0,1,1,0]]).T
    neural_network.train(train_inputs, train_outputs, 10000)

    print("New synaptic weights after training: ")
    print(neural_network.weights)

    # Test the neural network with a new situation.
    print("Considering new situation [1, 0, 0] -> ?: ")
    print(neural_network.think(array([1, 0, 0])))